{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gallagher Python This project maintains an idiomatic client for Python. The project began as a requirement for us to reliably work with the Gallagher API. While Gallagher publish their API reference which is built from an OpenAPI spec with Spectacle documentation generator flavours. The OpenAPI spec is maintained by hand and can be found on Github . Our assumption is that this is for security and technical reasons. In the spirit of building good quality software we embarked on building a Python idiomatic client with full test coverage. The API client draws inspiration from companies like Stripe or projects like pyndatic who are known for stellar developer experience. Our aim is to provide a similar quality of developer experience for Gallagher projects. The design pattern of the API client is opinionated from our experience as software engineers. We goto great lengths to document and justify our thought process so others can see where we are coming from. Note: This project is not affiliated with Gallagher in any way. Features pydantic models for all API payloads HTTP transport using httpx Full test coverage A completely python based interface to interacting with Gallagher Command Centre Developing the client This library uses httpx as the HTTP transport and pydantic to construct and ingest payloads. We use taskfile to run tasks. Our test suite is setup using pytest . Anomaly has a demo Command Centre set up in the cloud that we run tests against. This is populate using a sample site configuration. There are no real security controllers connected to this instance. Upon a PR being lodged, Github actions is configured to run the entire test suite against our demo instance. To contribute to the library, please fork this repository and lodge a pull request for us to accept your changes. Contributing to the documentation The documentation is build using mkdocs and hosted on Github pages . The project repository is configured to build and publish the documentation on every commit to the master branch. Some handy commands to get you started: mkdocs new [dir-name] - Create a new project. mkdocs serve -a localhost:8003 - Start the live-reloading docs server, -a allows you to provide a custom address. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. To start contributing please fork this repository, make the changes you desire and submit a pull request for us to merge your changes in. Alternatively consider starting a discussion or raising an issue . Be kind to our maintainers and check to see if a similar discussion is already in place and join the thread.","title":"Welcome to Gallagher Python"},{"location":"#welcome-to-gallagher-python","text":"This project maintains an idiomatic client for Python. The project began as a requirement for us to reliably work with the Gallagher API. While Gallagher publish their API reference which is built from an OpenAPI spec with Spectacle documentation generator flavours. The OpenAPI spec is maintained by hand and can be found on Github . Our assumption is that this is for security and technical reasons. In the spirit of building good quality software we embarked on building a Python idiomatic client with full test coverage. The API client draws inspiration from companies like Stripe or projects like pyndatic who are known for stellar developer experience. Our aim is to provide a similar quality of developer experience for Gallagher projects. The design pattern of the API client is opinionated from our experience as software engineers. We goto great lengths to document and justify our thought process so others can see where we are coming from. Note: This project is not affiliated with Gallagher in any way.","title":"Welcome to Gallagher Python"},{"location":"#features","text":"pydantic models for all API payloads HTTP transport using httpx Full test coverage A completely python based interface to interacting with Gallagher Command Centre","title":"Features"},{"location":"#developing-the-client","text":"This library uses httpx as the HTTP transport and pydantic to construct and ingest payloads. We use taskfile to run tasks. Our test suite is setup using pytest . Anomaly has a demo Command Centre set up in the cloud that we run tests against. This is populate using a sample site configuration. There are no real security controllers connected to this instance. Upon a PR being lodged, Github actions is configured to run the entire test suite against our demo instance. To contribute to the library, please fork this repository and lodge a pull request for us to accept your changes.","title":"Developing the client"},{"location":"#contributing-to-the-documentation","text":"The documentation is build using mkdocs and hosted on Github pages . The project repository is configured to build and publish the documentation on every commit to the master branch. Some handy commands to get you started: mkdocs new [dir-name] - Create a new project. mkdocs serve -a localhost:8003 - Start the live-reloading docs server, -a allows you to provide a custom address. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. To start contributing please fork this repository, make the changes you desire and submit a pull request for us to merge your changes in. Alternatively consider starting a discussion or raising an issue . Be kind to our maintainers and check to see if a similar discussion is already in place and join the thread.","title":"Contributing to the documentation"},{"location":"cli/","text":"Command Line Interface We provide a command line interface to interact with the Gallagher Command Centre. It uses the API client to communicate with the server, which doubly serves as a reference example of how to use the API client. We use typer to construct the CLI, which in turn uses click . We also use rich to make the output nicer. The CLI is decoupled from the API client, and is not install by default. We follow a git like command , sub-command pattern, so it should feel quite familiar. poetry will install the alias gal for you to interact with the CLI. You can ask for help with: gal --help which will list the available commands: Usage: gal [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion Install completion for the current shell. \u2502 \u2502 --show-completion Show completion for the current shell, to copy it or customize the installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 alarms list or query alarms in the command centre \u2502 \u2502 ch query or manage cardholders \u2502 \u2502 events query command centre events \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f A simple example to get a list of cardholders looks like: (gallagher-py3.11) \u279c gallagher git:(dto-implementation) \u2717 gal ch list Cardholders \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 Id \u2503 First name \u2503 Last name \u2503 Authorised \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 8246 \u2502 Johnetta \u2502 Abdallah \u2502 yes \u2502 \u2502 7936 \u2502 Socorro \u2502 Abrahams \u2502 yes \u2502 \u2502 8374 \u2502 Geoffrey \u2502 Acey \u2502 yes \u2502 \u2502 8370 \u2502 Weldon \u2502 Acuff \u2502 yes \u2502 \u2502 7922 \u2502 Rusty \u2502 Adelsperger \u2502 yes \u2502 you can also ask each sub command to give you in","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"We provide a command line interface to interact with the Gallagher Command Centre. It uses the API client to communicate with the server, which doubly serves as a reference example of how to use the API client. We use typer to construct the CLI, which in turn uses click . We also use rich to make the output nicer. The CLI is decoupled from the API client, and is not install by default. We follow a git like command , sub-command pattern, so it should feel quite familiar. poetry will install the alias gal for you to interact with the CLI. You can ask for help with: gal --help which will list the available commands: Usage: gal [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion Install completion for the current shell. \u2502 \u2502 --show-completion Show completion for the current shell, to copy it or customize the installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 alarms list or query alarms in the command centre \u2502 \u2502 ch query or manage cardholders \u2502 \u2502 events query command centre events \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f A simple example to get a list of cardholders looks like: (gallagher-py3.11) \u279c gallagher git:(dto-implementation) \u2717 gal ch list Cardholders \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 Id \u2503 First name \u2503 Last name \u2503 Authorised \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 8246 \u2502 Johnetta \u2502 Abdallah \u2502 yes \u2502 \u2502 7936 \u2502 Socorro \u2502 Abrahams \u2502 yes \u2502 \u2502 8374 \u2502 Geoffrey \u2502 Acey \u2502 yes \u2502 \u2502 8370 \u2502 Weldon \u2502 Acuff \u2502 yes \u2502 \u2502 7922 \u2502 Rusty \u2502 Adelsperger \u2502 yes \u2502 you can also ask each sub command to give you in","title":"Command Line Interface"},{"location":"design/","text":"Design A central feature to this client is it's detailed design, focused on a superior developer experience and performance. We also ensure that we follow design patterns outlined by Gallagher Data Transfer Objects This a central part of our design. There are three types of schema definitions, each one of them suffixed with their intent: Ref are References to other objects, they using contain a href and possibly additional meta data such as a name or id Summary is what is returned by the Gallagher API in operations such as searches , these are generally a subset of the full object Detail are the full object found at a particular href , they compound on the Summary schema and add additional attributes I additional we have classes that defined responses which are suffixed with Response , these wrap structures which returns hrefs for next and previous responses and usually have a collection to hold the response. Ensure that each Endpoint defines their own DTOs so you can test them for authenticity. Avoid writing generic classes. While Refs , Summary and Detail responses have fields, and it would make sense from an efficiency point of view to inherit e.g Summary builds on Ref , this should be avoided so logically an instance of a Ref class doesn't assert true for isinstance of a Summary class. API Client Core The core package in cc provides two important classes: APIEndpoint which all endpoint consumers configuration must inherit from EndpointConfig an instance of which each class must return as a result of the get_config method Every Endpoint Consumer Class is expected to return an instance of EndpointConfig from the get_config method. Each configuration provides references to paths that are dynamically discovered as part of our bootstrapping process. Never hard code URLs as this violates the HATEOAS design principle. Additionally each configuration will provide references to DTO classes that is used to parse responses, and details of the body. class Alarms( APIEndpoint ): \"\"\" Alarms \"\"\" @classmethod async def get_config(cls) -> EndpointConfig: return EndpointConfig( endpoint=Capabilities.CURRENT.features.alarms.alarms, dto_list=AlarmResponse, dto_retrieve=AlarmZoneSummary, ) The above example shows the Alarms class which is a consumer of the alarms endpoint. It nominates AlarmResponse as the class the infrastructure will use to parse list responses and AlarmZoneSummary as the class to parse retrieve responses. It references the Capabilities.CURRENT singleton which is a Capabilities instance that is bootstrapped at runtime. This is a singleton that is used to provide references to all endpoints. If a command centre does not have a certain capability then the objects are set to None and accessing the feature raises an exception (more on this in other sections). Designing Endpoints Layout Layout of our files","title":"Design"},{"location":"design/#design","text":"A central feature to this client is it's detailed design, focused on a superior developer experience and performance. We also ensure that we follow design patterns outlined by Gallagher","title":"Design"},{"location":"design/#data-transfer-objects","text":"This a central part of our design. There are three types of schema definitions, each one of them suffixed with their intent: Ref are References to other objects, they using contain a href and possibly additional meta data such as a name or id Summary is what is returned by the Gallagher API in operations such as searches , these are generally a subset of the full object Detail are the full object found at a particular href , they compound on the Summary schema and add additional attributes I additional we have classes that defined responses which are suffixed with Response , these wrap structures which returns hrefs for next and previous responses and usually have a collection to hold the response. Ensure that each Endpoint defines their own DTOs so you can test them for authenticity. Avoid writing generic classes. While Refs , Summary and Detail responses have fields, and it would make sense from an efficiency point of view to inherit e.g Summary builds on Ref , this should be avoided so logically an instance of a Ref class doesn't assert true for isinstance of a Summary class.","title":"Data Transfer Objects"},{"location":"design/#api-client-core","text":"The core package in cc provides two important classes: APIEndpoint which all endpoint consumers configuration must inherit from EndpointConfig an instance of which each class must return as a result of the get_config method Every Endpoint Consumer Class is expected to return an instance of EndpointConfig from the get_config method. Each configuration provides references to paths that are dynamically discovered as part of our bootstrapping process. Never hard code URLs as this violates the HATEOAS design principle. Additionally each configuration will provide references to DTO classes that is used to parse responses, and details of the body. class Alarms( APIEndpoint ): \"\"\" Alarms \"\"\" @classmethod async def get_config(cls) -> EndpointConfig: return EndpointConfig( endpoint=Capabilities.CURRENT.features.alarms.alarms, dto_list=AlarmResponse, dto_retrieve=AlarmZoneSummary, ) The above example shows the Alarms class which is a consumer of the alarms endpoint. It nominates AlarmResponse as the class the infrastructure will use to parse list responses and AlarmZoneSummary as the class to parse retrieve responses. It references the Capabilities.CURRENT singleton which is a Capabilities instance that is bootstrapped at runtime. This is a singleton that is used to provide references to all endpoints. If a command centre does not have a certain capability then the objects are set to None and accessing the feature raises an exception (more on this in other sections).","title":"API Client Core"},{"location":"design/#designing-endpoints","text":"","title":"Designing Endpoints"},{"location":"design/#layout","text":"Layout of our files","title":"Layout"},{"location":"usage/","text":"Usage Installation We recommend installation via PyPI : poetry add gallagher Understanding the interface","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#installation","text":"We recommend installation via PyPI : poetry add gallagher","title":"Installation"},{"location":"usage/#understanding-the-interface","text":"","title":"Understanding the interface"}]}